name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  DOCKER_IMAGE: rutger505/dijker-website
  APP_NAME: dijker-website

jobs:
  build-docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.config.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate build config
        id: config
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
           
          echo "Setting tag to $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ steps.config.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:cache,mode=max

  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs:
      - build-docker-image

    strategy:
      matrix:
        environment:
          - ${{ github.ref == 'refs/heads/main' && 'production' || format('pr-{0}', github.event.pull_request.number) }}

    environment:
      name: ${{ matrix.environment }}
      url: https://${{ steps.config.outputs.ingress_host }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate deployment config
        id: config
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            INGRESS_HOST=${{ vars.BASE_DOMAIN }}
            LETSENCRYPT_ENV="production"
          else
            INGRESS_HOST=${{ github.sha }}.${{ vars.BASE_DOMAIN }}
            LETSENCRYPT_ENV="staging"
          fi

          echo "Setting ingress host to $INGRESS_HOST"
          echo "ingress_host=$INGRESS_HOST" >> $GITHUB_OUTPUT

          echo "Setting letsencrypt env to $LETSENCRYPT_ENV"
          echo "letsencrypt_env=$LETSENCRYPT_ENV" >> $GITHUB_OUTPUT

          NAMESPACE=$APP_NAME-${{ matrix.environment }}
          echo "Setting namespace to $NAMESPACE"
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.16.2"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.31.0"

      - name: Set up Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Process values file with envsubst
        env:
          DOCKER_TAG: ${{ needs.build-docker-image.outputs.tag }}
          INGRESS_HOST: ${{ steps.config.outputs.ingress_host }}
          APP_ENV: ${{ matrix.environment }}
          LETSENCRYPT_ENV: ${{ steps.config.outputs.letsencrypt_env }}
        run: |
          envsubst < ./k8s/values.yaml > ./k8s/processed-values.yaml

      - name: Deploy Helm Chart
        run: |
          helm upgrade --install  \
            ${{ env.APP_NAME }}-${{ matrix.environment }}  \
            ./k8s \
            -f ./k8s/processed-values.yaml \
            --namespace ${{ steps.config.outputs.namespace }} \
            --create-namespace \
            --wait
